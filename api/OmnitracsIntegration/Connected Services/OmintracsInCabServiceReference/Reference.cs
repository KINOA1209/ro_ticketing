//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OmintracsInCabServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OmintracsInCabServiceReference.srvSoap")]
    public interface srvSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddFlowStepDef", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddFlowStepDefAsync(string AuthenticationTicket, string DomainName, string FlowName, string StepName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddFlowStepDef1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddFlowStepDef1Async(string AuthenticationTicket, string DomainName, string FlowName, string StepName, int OnStartMoveTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddFlowTaskDef", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddFlowTaskDefAsync(string AuthenticationTicket, string DomainName, string FlowName, int StepNumber, string TaskDefXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDomainFlows", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainFlowsAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFolderFlows", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderFlowsAsync(string AuthenticationTicket, string FolderPath, bool IncludeInheritedFlows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFlowDef", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFlowDefAsync(string AuthenticationTicket, string DomainName, string WorkflowName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPublishingRequirements", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPublishingRequirementsAsync(string AuthenticationTicket, string domainname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAllUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAllUsersAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCoWorkers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetCoWorkersAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUserAsync(string AuthenticationTicket, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateUserAsync(string AuthenticationTicket, string DomainName, string UserName, string FirstName, string LastName, string EmailAddress, string Password, bool ReadOnlyUser, string AuthenticationSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateUserProfile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateUserProfileAsync(string AuthenticationTicket, string UserName, string NewUserName, string NewFirstName, string NewLastName, string AuthenticateSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeUserStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUserStatusAsync(string AuthenticationTicket, string UserName, int StatusCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeUserPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUserPasswordAsync(string AuthenticationTicket, string UserName, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateUserEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateUserEmailAsync(string AuthenticationTicket, string UserName, string NewEmailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateUserPreferences", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateUserPreferencesAsync(string AuthenticationTicket, string UserName, string xmlPreferences);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteUserAsync(string AuthenticationTicket, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUserGroupAsync(string AuthenticationTicket, string DomainName, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetGlobalGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetGlobalGroupsAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDomainGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainGroupsAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLocalGroups", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLocalGroupsAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateUserGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateUserGroupAsync(string AuthenticationTicket, string DomainName, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUsergroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteUsergroupAsync(string AuthenticationTicket, string DomainName, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateUserGroupName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateUserGroupNameAsync(string AuthenticationTicket, string DomainName, string GroupName, string NewGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetUserGroupMembers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUserGroupMembersAsync(string AuthenticationTicket, string DomainName, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddUsergroupMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUsergroupMemberAsync(string AuthenticationTicket, string DomainName, string GroupName, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveUsergroupMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUsergroupMemberAsync(string AuthenticationTicket, string DomainName, string GroupName, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDomainMembers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainMembersAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDomainUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainUsersAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetLocalUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLocalUsersAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetManagers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetManagersAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddUserAsDomainMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUserAsDomainMemberAsync(string AuthenticationTicket, string DomainName, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveUserFromDomainMembership", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserFromDomainMembershipAsync(string AuthenticationTicket, string DomainName, string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddUserGroupAsDomainMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUserGroupAsDomainMemberAsync(string AuthenticationTicket, string DomainName, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveUserGroupFromDomainMembership", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserGroupFromDomainMembershipAsync(string AuthenticationTicket, string DomainName, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddManagerToDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddManagerToDomainAsync(string AuthenticationTicket, string DomainName, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveManagerFromDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveManagerFromDomainAsync(string AuthenticationTicket, string DomainName, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Search", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SearchAsync(string AuthenticationTicket, string xmlcriteria, string SortBy, bool AscendingOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetNextSearchPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetNextSearchPageAsync(string AuthenticationTicket, bool withrules, bool withPropertySets, bool withSecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPreviousSearchPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPreviousSearchPageAsync(string AuthenticationTicket, bool withrules, bool withPropertySets, bool withSecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRandDScheduleInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetRandDScheduleInfoAsync(string AuthenticationTicket, int RDDefId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRandDSchedules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetRandDSchedulesAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateRandDSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateRandDScheduleAsync(string AuthenticationTicket, string RDDefXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateRandDSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateRandDScheduleAsync(string AuthenticationTicket, int RDdefId, bool ApplyToExistingDocumentFolders, string NewRDDefXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteRandDSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteRandDScheduleAsync(string AuthenticationTicket, int RDdefId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentTypesAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateDocumentTypeDef", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateDocumentTypeDefAsync(string AuthenticationTicket, string DocumentTypeName, string RequiredPropertySetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDocumentTypeDef", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentTypeDefAsync(string AuthenticationTicket, int DocumentTypeId, string NewDocumentTypeName, string NewRequiredPropertySetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTagDefintions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetTagDefintionsAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPropertySetDefinitions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetDefinitionsAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPropertySetDefinitions1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetDefinitions1Async(string AuthenticationTicket, string DomainNameFilter, bool AppliesToDocuments, bool AppliesToFolders, bool AppliesToUsers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPropertySetFieldOptions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetFieldOptionsAsync(string AuthenticationTicket, string PropertySetName, string PropertyFieldName, string OptionFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPropertySetDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetDefinitionAsync(string AuthenticationTicket, string PropertySetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreatePropertySetDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreatePropertySetDefinitionAsync(string AuthenticationTicket, string PropertySetName, string PropertySetCaption, bool AppliestoDocuments, bool AppliestoFolders, bool AppliestoUsers, string DomainNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePropertySetDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdatePropertySetDefinitionAsync(string AuthenticationTicket, string PropertySetName, string NewPropertySetName, string PropertySetCaption, bool AppliestoDocuments, bool AppliestoFolders, bool AppliestoUsers, string DomainNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePropertySetDefinition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeletePropertySetDefinitionAsync(string AuthenticationTicket, string PropertySetName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPropertySetField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddPropertySetFieldAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string FieldCaption, string FieldType, int FieldLength, bool isRequired, int ControlSize, int ControlOrder, string ControlType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetPropertySetLookupFieldParametersForMYSQL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetPropertySetLookupFieldParametersForMYSQLAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string MYSQL_ServerName, string MYSQL_PortNumber, string MYSQL_UserName, string MYSQL_Password, string MYSQL_DataBasename, string sqlSentence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetPropertySetLookupFieldParametersForSQLServer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetPropertySetLookupFieldParametersForSQLServerAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string SQLSERVER_ServerName, string SQLSERVER_UserName, string SQLSERVER_Password, string SQLSERVER_DataBasename, string sqlSentence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetPropertySetLookupFieldParametersForORACLE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetPropertySetLookupFieldParametersForORACLEAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string ORACLE_ServiceName, string ORACLE_UserName, string ORACLE_Password, string sqlSentence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPropertySetFieldOption", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddPropertySetFieldOptionAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string OptionValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePropertySetFieldOption", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeletePropertySetFieldOptionAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string OptionValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePropertySetField", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeletePropertySetFieldAsync(string AuthenticationTicket, string PropertySetName, string FieldName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccessListHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAccessListHistoryAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetAccessList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetAccessListAsync(string AuthenticationTicket, string Path, string AccessListXML, bool ApplyToTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ApplyInheritedAccessList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ApplyInheritedAccessListAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DocumentExistsAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentExists1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DocumentExists1Async(string AuthenticationTicket, string FolderPath, string DocumentName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentsAsync(string AuthenticationTicket, string Path, bool withPropertySets, bool withSecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSubscriptions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSubscriptionsAsync(string AuthenticationTicket, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFavorites", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFavoritesAsync(string AuthenticationTicket, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMyDocumentsAndFolders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetMyDocumentsAndFoldersAsync(string AuthenticationTicket, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCheckedoutDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetCheckedoutDocumentsAsync(string AuthenticationTicket, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRecentDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetRecentDocumentsAsync(string AuthenticationTicket, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDownloadQue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadQueAsync(string AuthenticationTicket, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFoldersAndDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAndDocumentsAsync(string AuthenticationTicket, string Path, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFolders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAsync(string AuthenticationTicket, string Path, bool WithRules, bool withPropertySets, bool withSecurity, bool withOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFoldersAndDocuments1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAndDocuments1Async(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFoldersAndDocuments2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAndDocuments2Async(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFolders1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolders1Async(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocuments1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocuments1Async(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFoldersByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersByPageAsync(string AuthenticationTicket, string Path, string FolderFilter, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentsByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentsByPageAsync(string AuthenticationTicket, string Path, string DocumentFilter, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFoldersAndDocumentsByPage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAndDocumentsByPageAsync(string AuthenticationTicket, string Path, string FolderFilter, string DocumentFilter, int PageNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Move", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> MoveAsync(string AuthenticationTicket, string SourcePath, string DestinationPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Copy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CopyAsync(string AuthenticationTicket, string SourcePath, string DestinationPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadZip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadZipResponse> DownloadZipAsync(OmintracsInCabServiceReference.DownloadZipRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadDocumentResponse> DownloadDocumentAsync(OmintracsInCabServiceReference.DownloadDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadDocumentVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadDocumentVersionResponse> DownloadDocumentVersionAsync(OmintracsInCabServiceReference.DownloadDocumentVersionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDownloadInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadInfoAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDownloadInfoByVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadInfoByVersionAsync(string AuthenticationTicket, string Path, int VersionNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDownloadHandler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadHandlerAsync(string AuthenticationTicket, string Path, int PreferedChunkSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDownloadHandlerByVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadHandlerByVersionAsync(string AuthenticationTicket, string Path, int PreferedChunkSize, int VersionNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DownloadFileChunk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DownloadFileChunkAsync(string AuthenticationTicket, string DownloadHandler, int StartOffset, int ChunkSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateDocumentShortcut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateDocumentShortcutAsync(string AuthenticationTicket, string Path, string TargetDocumentPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateURL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateURLAsync(string AuthenticationTicket, string Path, string AddressURL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateUploadHandler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateUploadHandlerAsync(string AuthenticationTicket, int PreferedChunkSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteDownloadHandler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDownloadHandlerAsync(string AuthenticationTicket, string DownloadHandler);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteUploadHandler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteUploadHandlerAsync(string AuthenticationTicket, string UploadHandler);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFileChunk", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadFileChunkResponse> UploadFileChunkAsync(OmintracsInCabServiceReference.UploadFileChunkRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadTiffAsPDF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadTiffAsPDFResponse> UploadTiffAsPDFAsync(OmintracsInCabServiceReference.UploadTiffAsPDFRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadTiffAsPDFWithHandler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadTiffAsPDFWithHandlerAsync(string AuthenticationTicket, string Path, string UploadHandler);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocumentWithHandler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadDocumentWithHandlerAsync(string AuthenticationTicket, string Path, string UploadHandler);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocumentWithHandler1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadDocumentWithHandler1Async(string AuthenticationTicket, string Path, string UploadHandler, string VersionComments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocumentWithHandler2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadDocumentWithHandler2Async(string AuthenticationTicket, string Path, string UploadHandler, string VersionComments, short MPVersionMajor, short MPVersionMinor, short MPVersionRevision);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocumentWithHandler3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadDocumentWithHandler3Async(string AuthenticationTicket, string Path, string UploadHandler, string xmlParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadNewDocumentWidthHandler", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadNewDocumentWidthHandlerAsync(string AuthenticationTicket, string FolderPath, string DocumentName, string UploadHandler, string xmlParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocumentResponse> UploadDocumentAsync(OmintracsInCabServiceReference.UploadDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocument1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument1Response> UploadDocument1Async(OmintracsInCabServiceReference.UploadDocument1Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocument2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument2Response> UploadDocument2Async(OmintracsInCabServiceReference.UploadDocument2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocument3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument3Response> UploadDocument3Async(OmintracsInCabServiceReference.UploadDocument3Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadDocument4", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument4Response> UploadDocument4Async(OmintracsInCabServiceReference.UploadDocument4Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RegisterEmailAsync(string AuthenticationTicket, string TargetPath, string Senders, string Recipients, string CCAddress, string BCCAddress, System.DateTime SentDate, string Subject, string header, string htmlBody, string textBody, string AttachmentHandlers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterEmail1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RegisterEmail1Async(string AuthenticationTicket, string TargetPath, string Senders, string Recipients, string CCAddress, string BCCAddress, System.DateTime SentDate, string Subject, string header, string htmlBody, string textBody, string AttachmentHandlers, string keywords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RegisterEmail2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RegisterEmail2Async(string AuthenticationTicket, string FolderPath, string EmailName, string Senders, string Recipients, string CCAddress, string BCCAddress, System.DateTime SentDate, string Subject, string header, string htmlBody, string textBody, string AttachmentHandlers, string keywords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServerSideImport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ServerSideImportAsync(string AuthenticationTicket, string BaseServerSidePath, string Items, string TargetIRPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateDocumentUsingTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateDocumentUsingTemplateAsync(string AuthenticationTicket, string Path, string TemplatePath, string xmlContent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IsLockPossible", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> IsLockPossibleAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Lock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> LockAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UnLock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UnLockAsync(string AuthenticationTicket, string Path, bool force);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EmptyRecycleBin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> EmptyRecycleBinAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PurgeRecycleBinItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> PurgeRecycleBinItemAsync(string AuthenticationTicket, string ItemHandler);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RestoreRecycleBinItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RestoreRecycleBinItemAsync(string AuthenticationTicket, string ItemHandler, string RestorePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetRecycleBinContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetRecycleBinContentAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDeleteLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDeleteLogAsync(string AuthenticationTicket, System.DateTime StartDate, System.DateTime EndDate, string PathFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFolderCatalog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderCatalogAsync(string AuthenticationTicket, string folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFolderStatistics", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderStatisticsAsync(string AuthenticationTicket, string folderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getApplicationParameters", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> getApplicationParametersAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateDomainAsync(string AuthenticationTicket, string DomainName, bool Anonymous, bool Hidden, string WelcomeMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDomainAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDomains", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainsAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMemberDomains", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetMemberDomainsAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDomainAsync(string AuthenticationTicket, string DomainName, string NewDomainName, bool Anonymous, bool Hidden, string WelcomeMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ArchiveDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ArchiveDomainAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UnarchiveDomain", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UnarchiveDomainAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DomainExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DomainExistsAsync(string AuthenticationTicket, string DomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateFlowDef", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateFlowDefAsync(string AuthenticationTicket, string DomainName, string FlowName, string ActiveFolderPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateFlowDef1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateFlowDef1Async(string AuthenticationTicket, string DomainName, string FlowName, string ActiveFolderPath, string OnEndMoveToPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MaintenanceBeat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task MaintenanceBeatAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServerInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> ServerInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAddInInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAddInInfoAsync(string AddInName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAddInPart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.GetAddInPartResponse> GetAddInPartAsync(OmintracsInCabServiceReference.GetAddInPartRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> LogOutAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateTicketforUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateTicketforUserAsync(string TrustedUserPwd, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuthenticateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AuthenticateUserAsync(string UID, string PWD);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AuthenticateUser1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AuthenticateUser1Async(string UID, string PWD, string Lang);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RenewTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RenewTicketAsync(string UID, string PWD, string Lang, string OldTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/isValidTicket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> isValidTicketAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UserExistsAsync(string AuthenticationTicket, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DocumentAccessAllowed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DocumentAccessAllowedAsync(string AuthenticationTicket, string Path, int ActionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FolderAccessAllowed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> FolderAccessAllowedAsync(string AuthenticationTicket, string Path, int ActionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateFolderAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateFolder1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateFolder1Async(string AuthenticationTicket, string ParentFolderPath, string NewFolderName, string Description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteFolderAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDocumentAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UnpublishDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UnpublishDocumentAsync(string AuthenticationTicket, string DocumentPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PublishDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> PublishDocumentAsync(string AuthenticationTicket, string DocumentPath, int VersionNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteDocumentVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDocumentVersionAsync(string AuthenticationTicket, string DocumentPath, int VersionNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSubscribers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSubscribersAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddUserToFolderSubscribers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUserToFolderSubscribersAsync(string AuthenticationTicket, string FolderPath, string UserName, bool ON_READ, bool ON_CHANGE, bool ON_UPDATE, bool ON_CHECKOUT, bool ON_APPROVE, bool ON_REJECT, bool ON_COMMENT, bool ON_MOVE, bool ON_DELETE, bool ON_CHECKIN, bool ON_NEWDOC, bool IncludeSubObjects);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddUserToDocumentSubscribers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUserToDocumentSubscribersAsync(string AuthenticationTicket, string DocumentPath, string UserName, bool ON_READ, bool ON_CHANGE, bool ON_UPDATE, bool ON_CHECKOUT, bool ON_APPROVE, bool ON_REJECT, bool ON_COMMENT, bool ON_MOVE, bool ON_DELETE, bool ON_CHECKIN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveUserFromFolderSubscribers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserFromFolderSubscribersAsync(string AuthenticationTicket, string FolderPath, string UserName, bool IncludeSubObjects);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveUserFromDocumentSubscribers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserFromDocumentSubscribersAsync(string AuthenticationTicket, string DocumentPath, string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FolderExists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> FolderExistsAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FolderExists1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> FolderExists1Async(string AuthenticationTicket, string FolderPath, string FolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSubFoldersCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSubFoldersCountAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetParentFolderIDs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetParentFolderIDsAsync(string AuthenticationTicket, int FolderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderAsync(string AuthenticationTicket, string Path, bool WithRules, bool withPropertySets, bool withSecurity, bool withOwner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentAsync(string AuthenticationTicket, string Path, bool withPropertySets, bool withSecurity, bool withOwner, bool withVersions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentVersions", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentVersionsAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentAbstract", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentAbstractAsync(string AuthenticationTicket, string Path, int VersionNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentTextOnlyContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentTextOnlyContentAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetVersionTextOnlyContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetVersionTextOnlyContentAsync(string AuthenticationTicket, string Path, int VersionNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetDocumentTextOnlyContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentTextOnlyContentAsync(string AuthenticationTicket, string Path, string ContentText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetVersionTextOnlyContent", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetVersionTextOnlyContentAsync(string AuthenticationTicket, string Path, int VersionNumber, string ContentText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentComments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentCommentsAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssociationTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociationTypesAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssociateDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociateDocumentAsync(string AuthenticationTicket, string DocumentPath, string AssociateWith_ItemPath, int AssociationTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssociateFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociateFolderAsync(string AuthenticationTicket, string FolderPath, string AssociateWith_ItemPath, int AssociationTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveAssociation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveAssociationAsync(string AuthenticationTicket, string ItemPath, string AssociationWith_ItemPath, bool IsReverseAssociation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssociatedDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociatedDocumentsAsync(string AuthenticationTicket, string ItemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssociatedFolders", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociatedFoldersAsync(string AuthenticationTicket, string ItemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AssociatedFoldersAndDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociatedFoldersAndDocumentsAsync(string AuthenticationTicket, string ItemPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/getTasks", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> getTasksAsync(string AuthenticationTicket, string xmlcriteria, string SortBy, bool AscendingOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDueTaskDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDueTaskDocumentsAsync(string AuthenticationTicket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddDocumentComment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddDocumentCommentAsync(string AuthenticationTicket, string DocumentPath, string CommentText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeleteDocumentComment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDocumentCommentAsync(string AuthenticationTicket, string DocumentPath, int CommentAuthorID, System.DateTime CommentDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentViewLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentViewLogAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentReadLogHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentReadLogHistoryAsync(string AuthenticationTicket, string Path, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentKeywords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentKeywordsAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetPropertySets", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetsAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddPropertySetRow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddPropertySetRowAsync(string AuthenticationTicket, string Path, string xmlpset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdatePropertySetRow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdatePropertySetRowAsync(string AuthenticationTicket, string Path, string xmlpset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DeletePropertySetRow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeletePropertySetRowAsync(string AuthenticationTicket, string Path, string xmlpset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetOwnerAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetOwnerAsync(string AuthenticationTicket, string Path, string NewOwnerUserName, bool ApplytoTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFolderRules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderRulesAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetFolderRules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetFolderRulesAsync(string AuthenticationTicket, string Path, System.Xml.Linq.XElement xmlRules, bool ApplyToTree);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateFolderProperties", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateFolderPropertiesAsync(string AuthenticationTicket, string Path, string NewFolderName, string NewDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDocumentProperties", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentPropertiesAsync(string AuthenticationTicket, string Path, string NewDocumentName, string NewDescription, string NewUpdateInstructions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDocumentProperties1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentProperties1Async(string AuthenticationTicket, string Path, string NewDocumentName, string NewDescription, string NewUpdateInstructions, string NewDocumentSource, string NewDocumentLanguage, string NewDocumentAuthor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDocumentType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentTypeAsync(string AuthenticationTicket, string Path, int DocumentTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SubmitDocumentToFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SubmitDocumentToFlowAsync(string AuthenticationTicket, string Path, string FlowDefID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SubmitDocumentToFlow1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SubmitDocumentToFlow1Async(string AuthenticationTicket, string Path, string FlowDefID, string StepPlayerIDs, string StepGroupIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetDocumentCompletionStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentCompletionStatusAsync(string AuthenticationTicket, string Path, int PercentComplete, System.DateTime CompletionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetDocumentImportance", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentImportanceAsync(string AuthenticationTicket, string Path, short Importance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetFolderRandDSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderRandDScheduleAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDocumentRandDSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentRandDScheduleAsync(string AuthenticationTicket, string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetDocumentRandDSchedule", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentRandDScheduleAsync(string AuthenticationTicket, string Path, int RDDefId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetDocumentRetention", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentRetentionAsync(string AuthenticationTicket, string Path, short RetentionStatus, System.DateTime RetainUntil);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateDocumentKeywords", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentKeywordsAsync(string AuthenticationTicket, string Path, string Keywords);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetAccessList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAccessListAsync(string AuthenticationTicket, string Path);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadZip", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadZipRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Paths;
        
        public DownloadZipRequest()
        {
        }
        
        public DownloadZipRequest(string AuthenticationTicket, string Paths)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Paths = Paths;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadZipResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadZipResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadZipResult;
        
        public DownloadZipResponse()
        {
        }
        
        public DownloadZipResponse(byte[] DownloadZipResult)
        {
            this.DownloadZipResult = DownloadZipResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadDocument", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadDocumentRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Path;
        
        public DownloadDocumentRequest()
        {
        }
        
        public DownloadDocumentRequest(string AuthenticationTicket, string Path)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Path = Path;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadDocumentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadDocumentResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadDocumentResult;
        
        public DownloadDocumentResponse()
        {
        }
        
        public DownloadDocumentResponse(byte[] DownloadDocumentResult)
        {
            this.DownloadDocumentResult = DownloadDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadDocumentVersion", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadDocumentVersionRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int VersionNumber;
        
        public DownloadDocumentVersionRequest()
        {
        }
        
        public DownloadDocumentVersionRequest(string AuthenticationTicket, string Path, int VersionNumber)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Path = Path;
            this.VersionNumber = VersionNumber;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadDocumentVersionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadDocumentVersionResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadDocumentVersionResult;
        
        public DownloadDocumentVersionResponse()
        {
        }
        
        public DownloadDocumentVersionResponse(byte[] DownloadDocumentVersionResult)
        {
            this.DownloadDocumentVersionResult = DownloadDocumentVersionResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileChunk", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileChunkRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string UploadHandler;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileChunk;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string ChunkHEXCRC;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public bool LastChunk;
        
        public UploadFileChunkRequest()
        {
        }
        
        public UploadFileChunkRequest(string AuthenticationTicket, string UploadHandler, byte[] FileChunk, string ChunkHEXCRC, bool LastChunk)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.UploadHandler = UploadHandler;
            this.FileChunk = FileChunk;
            this.ChunkHEXCRC = ChunkHEXCRC;
            this.LastChunk = LastChunk;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileChunkResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileChunkResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement UploadFileChunkResult;
        
        public UploadFileChunkResponse()
        {
        }
        
        public UploadFileChunkResponse(System.Xml.Linq.XElement UploadFileChunkResult)
        {
            this.UploadFileChunkResult = UploadFileChunkResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadTiffAsPDF", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadTiffAsPDFRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileContent;
        
        public UploadTiffAsPDFRequest()
        {
        }
        
        public UploadTiffAsPDFRequest(string AuthenticationTicket, string Path, byte[] FileContent)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Path = Path;
            this.FileContent = FileContent;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadTiffAsPDFResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadTiffAsPDFResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement UploadTiffAsPDFResult;
        
        public UploadTiffAsPDFResponse()
        {
        }
        
        public UploadTiffAsPDFResponse(System.Xml.Linq.XElement UploadTiffAsPDFResult)
        {
            this.UploadTiffAsPDFResult = UploadTiffAsPDFResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocumentRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileContent;
        
        public UploadDocumentRequest()
        {
        }
        
        public UploadDocumentRequest(string AuthenticationTicket, string Path, byte[] FileContent)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Path = Path;
            this.FileContent = FileContent;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocumentResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocumentResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement UploadDocumentResult;
        
        public UploadDocumentResponse()
        {
        }
        
        public UploadDocumentResponse(System.Xml.Linq.XElement UploadDocumentResult)
        {
            this.UploadDocumentResult = UploadDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument1", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocument1Request
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileContent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string VersionComment;
        
        public UploadDocument1Request()
        {
        }
        
        public UploadDocument1Request(string AuthenticationTicket, string Path, byte[] FileContent, string VersionComment)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Path = Path;
            this.FileContent = FileContent;
            this.VersionComment = VersionComment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument1Response", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocument1Response
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement UploadDocument1Result;
        
        public UploadDocument1Response()
        {
        }
        
        public UploadDocument1Response(System.Xml.Linq.XElement UploadDocument1Result)
        {
            this.UploadDocument1Result = UploadDocument1Result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument2", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocument2Request
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileContent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public bool Checkout;
        
        public UploadDocument2Request()
        {
        }
        
        public UploadDocument2Request(string AuthenticationTicket, string Path, byte[] FileContent, bool Checkout)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Path = Path;
            this.FileContent = FileContent;
            this.Checkout = Checkout;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument2Response", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocument2Response
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement UploadDocument2Result;
        
        public UploadDocument2Response()
        {
        }
        
        public UploadDocument2Response(System.Xml.Linq.XElement UploadDocument2Result)
        {
            this.UploadDocument2Result = UploadDocument2Result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument3", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocument3Request
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileContent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string VersionComment;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public bool Checkout;
        
        public UploadDocument3Request()
        {
        }
        
        public UploadDocument3Request(string AuthenticationTicket, string Path, byte[] FileContent, string VersionComment, bool Checkout)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Path = Path;
            this.FileContent = FileContent;
            this.VersionComment = VersionComment;
            this.Checkout = Checkout;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument3Response", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocument3Response
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement UploadDocument3Result;
        
        public UploadDocument3Response()
        {
        }
        
        public UploadDocument3Response(System.Xml.Linq.XElement UploadDocument3Result)
        {
            this.UploadDocument3Result = UploadDocument3Result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument4", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocument4Request
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthenticationTicket;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Path;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FileContent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string xmlParameters;
        
        public UploadDocument4Request()
        {
        }
        
        public UploadDocument4Request(string AuthenticationTicket, string Path, byte[] FileContent, string xmlParameters)
        {
            this.AuthenticationTicket = AuthenticationTicket;
            this.Path = Path;
            this.FileContent = FileContent;
            this.xmlParameters = xmlParameters;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadDocument4Response", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadDocument4Response
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.Xml.Linq.XElement UploadDocument4Result;
        
        public UploadDocument4Response()
        {
        }
        
        public UploadDocument4Response(System.Xml.Linq.XElement UploadDocument4Result)
        {
            this.UploadDocument4Result = UploadDocument4Result;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAddInPart", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAddInPartRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AddInName;
        
        public GetAddInPartRequest()
        {
        }
        
        public GetAddInPartRequest(string AddInName)
        {
            this.AddInName = AddInName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAddInPartResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetAddInPartResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetAddInPartResult;
        
        public GetAddInPartResponse()
        {
        }
        
        public GetAddInPartResponse(byte[] GetAddInPartResult)
        {
            this.GetAddInPartResult = GetAddInPartResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface srvSoapChannel : OmintracsInCabServiceReference.srvSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class srvSoapClient : System.ServiceModel.ClientBase<OmintracsInCabServiceReference.srvSoap>, OmintracsInCabServiceReference.srvSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public srvSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(srvSoapClient.GetBindingForEndpoint(endpointConfiguration), srvSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();

            this.ClientCredentials.UserName.UserName = "WEBSVC@ROLFSONOIL";
            this.ClientCredentials.UserName.Password = "s@&m$B4xKYt6";

            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public srvSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(srvSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public srvSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(srvSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public srvSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddFlowStepDefAsync(string AuthenticationTicket, string DomainName, string FlowName, string StepName)
        {
            return base.Channel.AddFlowStepDefAsync(AuthenticationTicket, DomainName, FlowName, StepName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddFlowStepDef1Async(string AuthenticationTicket, string DomainName, string FlowName, string StepName, int OnStartMoveTo)
        {
            return base.Channel.AddFlowStepDef1Async(AuthenticationTicket, DomainName, FlowName, StepName, OnStartMoveTo);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddFlowTaskDefAsync(string AuthenticationTicket, string DomainName, string FlowName, int StepNumber, string TaskDefXML)
        {
            return base.Channel.AddFlowTaskDefAsync(AuthenticationTicket, DomainName, FlowName, StepNumber, TaskDefXML);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainFlowsAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.GetDomainFlowsAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderFlowsAsync(string AuthenticationTicket, string FolderPath, bool IncludeInheritedFlows)
        {
            return base.Channel.GetFolderFlowsAsync(AuthenticationTicket, FolderPath, IncludeInheritedFlows);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFlowDefAsync(string AuthenticationTicket, string DomainName, string WorkflowName)
        {
            return base.Channel.GetFlowDefAsync(AuthenticationTicket, DomainName, WorkflowName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPublishingRequirementsAsync(string AuthenticationTicket, string domainname)
        {
            return base.Channel.GetPublishingRequirementsAsync(AuthenticationTicket, domainname);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAllUsersAsync(string AuthenticationTicket)
        {
            return base.Channel.GetAllUsersAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetCoWorkersAsync(string AuthenticationTicket)
        {
            return base.Channel.GetCoWorkersAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUserAsync(string AuthenticationTicket, string UserName)
        {
            return base.Channel.GetUserAsync(AuthenticationTicket, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateUserAsync(string AuthenticationTicket, string DomainName, string UserName, string FirstName, string LastName, string EmailAddress, string Password, bool ReadOnlyUser, string AuthenticationSource)
        {
            return base.Channel.CreateUserAsync(AuthenticationTicket, DomainName, UserName, FirstName, LastName, EmailAddress, Password, ReadOnlyUser, AuthenticationSource);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateUserProfileAsync(string AuthenticationTicket, string UserName, string NewUserName, string NewFirstName, string NewLastName, string AuthenticateSource)
        {
            return base.Channel.UpdateUserProfileAsync(AuthenticationTicket, UserName, NewUserName, NewFirstName, NewLastName, AuthenticateSource);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUserStatusAsync(string AuthenticationTicket, string UserName, int StatusCode)
        {
            return base.Channel.ChangeUserStatusAsync(AuthenticationTicket, UserName, StatusCode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ChangeUserPasswordAsync(string AuthenticationTicket, string UserName, string NewPassword)
        {
            return base.Channel.ChangeUserPasswordAsync(AuthenticationTicket, UserName, NewPassword);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateUserEmailAsync(string AuthenticationTicket, string UserName, string NewEmailAddress)
        {
            return base.Channel.UpdateUserEmailAsync(AuthenticationTicket, UserName, NewEmailAddress);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateUserPreferencesAsync(string AuthenticationTicket, string UserName, string xmlPreferences)
        {
            return base.Channel.UpdateUserPreferencesAsync(AuthenticationTicket, UserName, xmlPreferences);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteUserAsync(string AuthenticationTicket, string UserName)
        {
            return base.Channel.DeleteUserAsync(AuthenticationTicket, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUserGroupAsync(string AuthenticationTicket, string DomainName, string GroupName)
        {
            return base.Channel.GetUserGroupAsync(AuthenticationTicket, DomainName, GroupName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetGlobalGroupsAsync(string AuthenticationTicket)
        {
            return base.Channel.GetGlobalGroupsAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainGroupsAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.GetDomainGroupsAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLocalGroupsAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.GetLocalGroupsAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateUserGroupAsync(string AuthenticationTicket, string DomainName, string GroupName)
        {
            return base.Channel.CreateUserGroupAsync(AuthenticationTicket, DomainName, GroupName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteUsergroupAsync(string AuthenticationTicket, string DomainName, string GroupName)
        {
            return base.Channel.DeleteUsergroupAsync(AuthenticationTicket, DomainName, GroupName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateUserGroupNameAsync(string AuthenticationTicket, string DomainName, string GroupName, string NewGroupName)
        {
            return base.Channel.UpdateUserGroupNameAsync(AuthenticationTicket, DomainName, GroupName, NewGroupName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetUserGroupMembersAsync(string AuthenticationTicket, string DomainName, string GroupName)
        {
            return base.Channel.GetUserGroupMembersAsync(AuthenticationTicket, DomainName, GroupName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUsergroupMemberAsync(string AuthenticationTicket, string DomainName, string GroupName, string UserName)
        {
            return base.Channel.AddUsergroupMemberAsync(AuthenticationTicket, DomainName, GroupName, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUsergroupMemberAsync(string AuthenticationTicket, string DomainName, string GroupName, string UserName)
        {
            return base.Channel.RemoveUsergroupMemberAsync(AuthenticationTicket, DomainName, GroupName, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainMembersAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.GetDomainMembersAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainUsersAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.GetDomainUsersAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetLocalUsersAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.GetLocalUsersAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetManagersAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.GetManagersAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUserAsDomainMemberAsync(string AuthenticationTicket, string DomainName, string UserName)
        {
            return base.Channel.AddUserAsDomainMemberAsync(AuthenticationTicket, DomainName, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserFromDomainMembershipAsync(string AuthenticationTicket, string DomainName, string Username)
        {
            return base.Channel.RemoveUserFromDomainMembershipAsync(AuthenticationTicket, DomainName, Username);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUserGroupAsDomainMemberAsync(string AuthenticationTicket, string DomainName, string GroupName)
        {
            return base.Channel.AddUserGroupAsDomainMemberAsync(AuthenticationTicket, DomainName, GroupName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserGroupFromDomainMembershipAsync(string AuthenticationTicket, string DomainName, string GroupName)
        {
            return base.Channel.RemoveUserGroupFromDomainMembershipAsync(AuthenticationTicket, DomainName, GroupName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddManagerToDomainAsync(string AuthenticationTicket, string DomainName, string UserName)
        {
            return base.Channel.AddManagerToDomainAsync(AuthenticationTicket, DomainName, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveManagerFromDomainAsync(string AuthenticationTicket, string DomainName, string UserName)
        {
            return base.Channel.RemoveManagerFromDomainAsync(AuthenticationTicket, DomainName, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SearchAsync(string AuthenticationTicket, string xmlcriteria, string SortBy, bool AscendingOrder)
        {
            return base.Channel.SearchAsync(AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetNextSearchPageAsync(string AuthenticationTicket, bool withrules, bool withPropertySets, bool withSecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetNextSearchPageAsync(AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPreviousSearchPageAsync(string AuthenticationTicket, bool withrules, bool withPropertySets, bool withSecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetPreviousSearchPageAsync(AuthenticationTicket, withrules, withPropertySets, withSecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetRandDScheduleInfoAsync(string AuthenticationTicket, int RDDefId)
        {
            return base.Channel.GetRandDScheduleInfoAsync(AuthenticationTicket, RDDefId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetRandDSchedulesAsync(string AuthenticationTicket)
        {
            return base.Channel.GetRandDSchedulesAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateRandDScheduleAsync(string AuthenticationTicket, string RDDefXML)
        {
            return base.Channel.CreateRandDScheduleAsync(AuthenticationTicket, RDDefXML);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateRandDScheduleAsync(string AuthenticationTicket, int RDdefId, bool ApplyToExistingDocumentFolders, string NewRDDefXML)
        {
            return base.Channel.UpdateRandDScheduleAsync(AuthenticationTicket, RDdefId, ApplyToExistingDocumentFolders, NewRDDefXML);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteRandDScheduleAsync(string AuthenticationTicket, int RDdefId)
        {
            return base.Channel.DeleteRandDScheduleAsync(AuthenticationTicket, RDdefId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentTypesAsync(string AuthenticationTicket)
        {
            return base.Channel.GetDocumentTypesAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateDocumentTypeDefAsync(string AuthenticationTicket, string DocumentTypeName, string RequiredPropertySetName)
        {
            return base.Channel.CreateDocumentTypeDefAsync(AuthenticationTicket, DocumentTypeName, RequiredPropertySetName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentTypeDefAsync(string AuthenticationTicket, int DocumentTypeId, string NewDocumentTypeName, string NewRequiredPropertySetName)
        {
            return base.Channel.UpdateDocumentTypeDefAsync(AuthenticationTicket, DocumentTypeId, NewDocumentTypeName, NewRequiredPropertySetName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetTagDefintionsAsync(string AuthenticationTicket)
        {
            return base.Channel.GetTagDefintionsAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetDefinitionsAsync(string AuthenticationTicket)
        {
            return base.Channel.GetPropertySetDefinitionsAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetDefinitions1Async(string AuthenticationTicket, string DomainNameFilter, bool AppliesToDocuments, bool AppliesToFolders, bool AppliesToUsers)
        {
            return base.Channel.GetPropertySetDefinitions1Async(AuthenticationTicket, DomainNameFilter, AppliesToDocuments, AppliesToFolders, AppliesToUsers);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetFieldOptionsAsync(string AuthenticationTicket, string PropertySetName, string PropertyFieldName, string OptionFilter)
        {
            return base.Channel.GetPropertySetFieldOptionsAsync(AuthenticationTicket, PropertySetName, PropertyFieldName, OptionFilter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetDefinitionAsync(string AuthenticationTicket, string PropertySetName)
        {
            return base.Channel.GetPropertySetDefinitionAsync(AuthenticationTicket, PropertySetName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreatePropertySetDefinitionAsync(string AuthenticationTicket, string PropertySetName, string PropertySetCaption, bool AppliestoDocuments, bool AppliestoFolders, bool AppliestoUsers, string DomainNames)
        {
            return base.Channel.CreatePropertySetDefinitionAsync(AuthenticationTicket, PropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdatePropertySetDefinitionAsync(string AuthenticationTicket, string PropertySetName, string NewPropertySetName, string PropertySetCaption, bool AppliestoDocuments, bool AppliestoFolders, bool AppliestoUsers, string DomainNames)
        {
            return base.Channel.UpdatePropertySetDefinitionAsync(AuthenticationTicket, PropertySetName, NewPropertySetName, PropertySetCaption, AppliestoDocuments, AppliestoFolders, AppliestoUsers, DomainNames);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeletePropertySetDefinitionAsync(string AuthenticationTicket, string PropertySetName)
        {
            return base.Channel.DeletePropertySetDefinitionAsync(AuthenticationTicket, PropertySetName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddPropertySetFieldAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string FieldCaption, string FieldType, int FieldLength, bool isRequired, int ControlSize, int ControlOrder, string ControlType)
        {
            return base.Channel.AddPropertySetFieldAsync(AuthenticationTicket, PropertySetName, FieldName, FieldCaption, FieldType, FieldLength, isRequired, ControlSize, ControlOrder, ControlType);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetPropertySetLookupFieldParametersForMYSQLAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string MYSQL_ServerName, string MYSQL_PortNumber, string MYSQL_UserName, string MYSQL_Password, string MYSQL_DataBasename, string sqlSentence)
        {
            return base.Channel.SetPropertySetLookupFieldParametersForMYSQLAsync(AuthenticationTicket, PropertySetName, FieldName, MYSQL_ServerName, MYSQL_PortNumber, MYSQL_UserName, MYSQL_Password, MYSQL_DataBasename, sqlSentence);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetPropertySetLookupFieldParametersForSQLServerAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string SQLSERVER_ServerName, string SQLSERVER_UserName, string SQLSERVER_Password, string SQLSERVER_DataBasename, string sqlSentence)
        {
            return base.Channel.SetPropertySetLookupFieldParametersForSQLServerAsync(AuthenticationTicket, PropertySetName, FieldName, SQLSERVER_ServerName, SQLSERVER_UserName, SQLSERVER_Password, SQLSERVER_DataBasename, sqlSentence);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetPropertySetLookupFieldParametersForORACLEAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string ORACLE_ServiceName, string ORACLE_UserName, string ORACLE_Password, string sqlSentence)
        {
            return base.Channel.SetPropertySetLookupFieldParametersForORACLEAsync(AuthenticationTicket, PropertySetName, FieldName, ORACLE_ServiceName, ORACLE_UserName, ORACLE_Password, sqlSentence);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddPropertySetFieldOptionAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string OptionValue)
        {
            return base.Channel.AddPropertySetFieldOptionAsync(AuthenticationTicket, PropertySetName, FieldName, OptionValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeletePropertySetFieldOptionAsync(string AuthenticationTicket, string PropertySetName, string FieldName, string OptionValue)
        {
            return base.Channel.DeletePropertySetFieldOptionAsync(AuthenticationTicket, PropertySetName, FieldName, OptionValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeletePropertySetFieldAsync(string AuthenticationTicket, string PropertySetName, string FieldName)
        {
            return base.Channel.DeletePropertySetFieldAsync(AuthenticationTicket, PropertySetName, FieldName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAccessListHistoryAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetAccessListHistoryAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetAccessListAsync(string AuthenticationTicket, string Path, string AccessListXML, bool ApplyToTree)
        {
            return base.Channel.SetAccessListAsync(AuthenticationTicket, Path, AccessListXML, ApplyToTree);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ApplyInheritedAccessListAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.ApplyInheritedAccessListAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DocumentExistsAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.DocumentExistsAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DocumentExists1Async(string AuthenticationTicket, string FolderPath, string DocumentName)
        {
            return base.Channel.DocumentExists1Async(AuthenticationTicket, FolderPath, DocumentName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentsAsync(string AuthenticationTicket, string Path, bool withPropertySets, bool withSecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetDocumentsAsync(AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSubscriptionsAsync(string AuthenticationTicket, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetSubscriptionsAsync(AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFavoritesAsync(string AuthenticationTicket, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetFavoritesAsync(AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetMyDocumentsAndFoldersAsync(string AuthenticationTicket, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetMyDocumentsAndFoldersAsync(AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetCheckedoutDocumentsAsync(string AuthenticationTicket, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetCheckedoutDocumentsAsync(AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetRecentDocumentsAsync(string AuthenticationTicket, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetRecentDocumentsAsync(AuthenticationTicket, withpropertysets, withsecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadQueAsync(string AuthenticationTicket, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetDownloadQueAsync(AuthenticationTicket, withrules, withpropertysets, withsecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAndDocumentsAsync(string AuthenticationTicket, string Path, bool withrules, bool withpropertysets, bool withsecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetFoldersAndDocumentsAsync(AuthenticationTicket, Path, withrules, withpropertysets, withsecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAsync(string AuthenticationTicket, string Path, bool WithRules, bool withPropertySets, bool withSecurity, bool withOwner)
        {
            return base.Channel.GetFoldersAsync(AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAndDocuments1Async(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetFoldersAndDocuments1Async(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAndDocuments2Async(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetFoldersAndDocuments2Async(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolders1Async(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetFolders1Async(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocuments1Async(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetDocuments1Async(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersByPageAsync(string AuthenticationTicket, string Path, string FolderFilter, int PageNumber)
        {
            return base.Channel.GetFoldersByPageAsync(AuthenticationTicket, Path, FolderFilter, PageNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentsByPageAsync(string AuthenticationTicket, string Path, string DocumentFilter, int PageNumber)
        {
            return base.Channel.GetDocumentsByPageAsync(AuthenticationTicket, Path, DocumentFilter, PageNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFoldersAndDocumentsByPageAsync(string AuthenticationTicket, string Path, string FolderFilter, string DocumentFilter, int PageNumber)
        {
            return base.Channel.GetFoldersAndDocumentsByPageAsync(AuthenticationTicket, Path, FolderFilter, DocumentFilter, PageNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> MoveAsync(string AuthenticationTicket, string SourcePath, string DestinationPath)
        {
            return base.Channel.MoveAsync(AuthenticationTicket, SourcePath, DestinationPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CopyAsync(string AuthenticationTicket, string SourcePath, string DestinationPath)
        {
            return base.Channel.CopyAsync(AuthenticationTicket, SourcePath, DestinationPath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadZipResponse> OmintracsInCabServiceReference.srvSoap.DownloadZipAsync(OmintracsInCabServiceReference.DownloadZipRequest request)
        {
            return base.Channel.DownloadZipAsync(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadZipResponse> DownloadZipAsync(string AuthenticationTicket, string Paths)
        {
            OmintracsInCabServiceReference.DownloadZipRequest inValue = new OmintracsInCabServiceReference.DownloadZipRequest();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Paths = Paths;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).DownloadZipAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadDocumentResponse> OmintracsInCabServiceReference.srvSoap.DownloadDocumentAsync(OmintracsInCabServiceReference.DownloadDocumentRequest request)
        {
            return base.Channel.DownloadDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadDocumentResponse> DownloadDocumentAsync(string AuthenticationTicket, string Path)
        {
            OmintracsInCabServiceReference.DownloadDocumentRequest inValue = new OmintracsInCabServiceReference.DownloadDocumentRequest();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Path = Path;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).DownloadDocumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadDocumentVersionResponse> OmintracsInCabServiceReference.srvSoap.DownloadDocumentVersionAsync(OmintracsInCabServiceReference.DownloadDocumentVersionRequest request)
        {
            return base.Channel.DownloadDocumentVersionAsync(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.DownloadDocumentVersionResponse> DownloadDocumentVersionAsync(string AuthenticationTicket, string Path, int VersionNumber)
        {
            OmintracsInCabServiceReference.DownloadDocumentVersionRequest inValue = new OmintracsInCabServiceReference.DownloadDocumentVersionRequest();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Path = Path;
            inValue.VersionNumber = VersionNumber;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).DownloadDocumentVersionAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadInfoAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetDownloadInfoAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadInfoByVersionAsync(string AuthenticationTicket, string Path, int VersionNumber)
        {
            return base.Channel.GetDownloadInfoByVersionAsync(AuthenticationTicket, Path, VersionNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadHandlerAsync(string AuthenticationTicket, string Path, int PreferedChunkSize)
        {
            return base.Channel.GetDownloadHandlerAsync(AuthenticationTicket, Path, PreferedChunkSize);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDownloadHandlerByVersionAsync(string AuthenticationTicket, string Path, int PreferedChunkSize, int VersionNumber)
        {
            return base.Channel.GetDownloadHandlerByVersionAsync(AuthenticationTicket, Path, PreferedChunkSize, VersionNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DownloadFileChunkAsync(string AuthenticationTicket, string DownloadHandler, int StartOffset, int ChunkSize)
        {
            return base.Channel.DownloadFileChunkAsync(AuthenticationTicket, DownloadHandler, StartOffset, ChunkSize);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateDocumentShortcutAsync(string AuthenticationTicket, string Path, string TargetDocumentPath)
        {
            return base.Channel.CreateDocumentShortcutAsync(AuthenticationTicket, Path, TargetDocumentPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateURLAsync(string AuthenticationTicket, string Path, string AddressURL)
        {
            return base.Channel.CreateURLAsync(AuthenticationTicket, Path, AddressURL);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateUploadHandlerAsync(string AuthenticationTicket, int PreferedChunkSize)
        {
            return base.Channel.CreateUploadHandlerAsync(AuthenticationTicket, PreferedChunkSize);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDownloadHandlerAsync(string AuthenticationTicket, string DownloadHandler)
        {
            return base.Channel.DeleteDownloadHandlerAsync(AuthenticationTicket, DownloadHandler);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteUploadHandlerAsync(string AuthenticationTicket, string UploadHandler)
        {
            return base.Channel.DeleteUploadHandlerAsync(AuthenticationTicket, UploadHandler);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadFileChunkResponse> OmintracsInCabServiceReference.srvSoap.UploadFileChunkAsync(OmintracsInCabServiceReference.UploadFileChunkRequest request)
        {
            return base.Channel.UploadFileChunkAsync(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadFileChunkResponse> UploadFileChunkAsync(string AuthenticationTicket, string UploadHandler, byte[] FileChunk, string ChunkHEXCRC, bool LastChunk)
        {
            OmintracsInCabServiceReference.UploadFileChunkRequest inValue = new OmintracsInCabServiceReference.UploadFileChunkRequest();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.UploadHandler = UploadHandler;
            inValue.FileChunk = FileChunk;
            inValue.ChunkHEXCRC = ChunkHEXCRC;
            inValue.LastChunk = LastChunk;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).UploadFileChunkAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadTiffAsPDFResponse> OmintracsInCabServiceReference.srvSoap.UploadTiffAsPDFAsync(OmintracsInCabServiceReference.UploadTiffAsPDFRequest request)
        {
            return base.Channel.UploadTiffAsPDFAsync(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadTiffAsPDFResponse> UploadTiffAsPDFAsync(string AuthenticationTicket, string Path, byte[] FileContent)
        {
            OmintracsInCabServiceReference.UploadTiffAsPDFRequest inValue = new OmintracsInCabServiceReference.UploadTiffAsPDFRequest();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Path = Path;
            inValue.FileContent = FileContent;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).UploadTiffAsPDFAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadTiffAsPDFWithHandlerAsync(string AuthenticationTicket, string Path, string UploadHandler)
        {
            return base.Channel.UploadTiffAsPDFWithHandlerAsync(AuthenticationTicket, Path, UploadHandler);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadDocumentWithHandlerAsync(string AuthenticationTicket, string Path, string UploadHandler)
        {
            return base.Channel.UploadDocumentWithHandlerAsync(AuthenticationTicket, Path, UploadHandler);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadDocumentWithHandler1Async(string AuthenticationTicket, string Path, string UploadHandler, string VersionComments)
        {
            return base.Channel.UploadDocumentWithHandler1Async(AuthenticationTicket, Path, UploadHandler, VersionComments);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadDocumentWithHandler2Async(string AuthenticationTicket, string Path, string UploadHandler, string VersionComments, short MPVersionMajor, short MPVersionMinor, short MPVersionRevision)
        {
            return base.Channel.UploadDocumentWithHandler2Async(AuthenticationTicket, Path, UploadHandler, VersionComments, MPVersionMajor, MPVersionMinor, MPVersionRevision);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadDocumentWithHandler3Async(string AuthenticationTicket, string Path, string UploadHandler, string xmlParameters)
        {
            return base.Channel.UploadDocumentWithHandler3Async(AuthenticationTicket, Path, UploadHandler, xmlParameters);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UploadNewDocumentWidthHandlerAsync(string AuthenticationTicket, string FolderPath, string DocumentName, string UploadHandler, string xmlParameters)
        {
            return base.Channel.UploadNewDocumentWidthHandlerAsync(AuthenticationTicket, FolderPath, DocumentName, UploadHandler, xmlParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocumentResponse> OmintracsInCabServiceReference.srvSoap.UploadDocumentAsync(OmintracsInCabServiceReference.UploadDocumentRequest request)
        {
            return base.Channel.UploadDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocumentResponse> UploadDocumentAsync(string AuthenticationTicket, string Path, byte[] FileContent)
        {
            OmintracsInCabServiceReference.UploadDocumentRequest inValue = new OmintracsInCabServiceReference.UploadDocumentRequest();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Path = Path;
            inValue.FileContent = FileContent;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).UploadDocumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument1Response> OmintracsInCabServiceReference.srvSoap.UploadDocument1Async(OmintracsInCabServiceReference.UploadDocument1Request request)
        {
            return base.Channel.UploadDocument1Async(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument1Response> UploadDocument1Async(string AuthenticationTicket, string Path, byte[] FileContent, string VersionComment)
        {
            OmintracsInCabServiceReference.UploadDocument1Request inValue = new OmintracsInCabServiceReference.UploadDocument1Request();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Path = Path;
            inValue.FileContent = FileContent;
            inValue.VersionComment = VersionComment;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).UploadDocument1Async(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument2Response> OmintracsInCabServiceReference.srvSoap.UploadDocument2Async(OmintracsInCabServiceReference.UploadDocument2Request request)
        {
            return base.Channel.UploadDocument2Async(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument2Response> UploadDocument2Async(string AuthenticationTicket, string Path, byte[] FileContent, bool Checkout)
        {
            OmintracsInCabServiceReference.UploadDocument2Request inValue = new OmintracsInCabServiceReference.UploadDocument2Request();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Path = Path;
            inValue.FileContent = FileContent;
            inValue.Checkout = Checkout;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).UploadDocument2Async(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument3Response> OmintracsInCabServiceReference.srvSoap.UploadDocument3Async(OmintracsInCabServiceReference.UploadDocument3Request request)
        {
            return base.Channel.UploadDocument3Async(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument3Response> UploadDocument3Async(string AuthenticationTicket, string Path, byte[] FileContent, string VersionComment, bool Checkout)
        {
            OmintracsInCabServiceReference.UploadDocument3Request inValue = new OmintracsInCabServiceReference.UploadDocument3Request();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Path = Path;
            inValue.FileContent = FileContent;
            inValue.VersionComment = VersionComment;
            inValue.Checkout = Checkout;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).UploadDocument3Async(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument4Response> OmintracsInCabServiceReference.srvSoap.UploadDocument4Async(OmintracsInCabServiceReference.UploadDocument4Request request)
        {
            return base.Channel.UploadDocument4Async(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.UploadDocument4Response> UploadDocument4Async(string AuthenticationTicket, string Path, byte[] FileContent, string xmlParameters)
        {
            OmintracsInCabServiceReference.UploadDocument4Request inValue = new OmintracsInCabServiceReference.UploadDocument4Request();
            inValue.AuthenticationTicket = AuthenticationTicket;
            inValue.Path = Path;
            inValue.FileContent = FileContent;
            inValue.xmlParameters = xmlParameters;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).UploadDocument4Async(inValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RegisterEmailAsync(string AuthenticationTicket, string TargetPath, string Senders, string Recipients, string CCAddress, string BCCAddress, System.DateTime SentDate, string Subject, string header, string htmlBody, string textBody, string AttachmentHandlers)
        {
            return base.Channel.RegisterEmailAsync(AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RegisterEmail1Async(string AuthenticationTicket, string TargetPath, string Senders, string Recipients, string CCAddress, string BCCAddress, System.DateTime SentDate, string Subject, string header, string htmlBody, string textBody, string AttachmentHandlers, string keywords)
        {
            return base.Channel.RegisterEmail1Async(AuthenticationTicket, TargetPath, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RegisterEmail2Async(string AuthenticationTicket, string FolderPath, string EmailName, string Senders, string Recipients, string CCAddress, string BCCAddress, System.DateTime SentDate, string Subject, string header, string htmlBody, string textBody, string AttachmentHandlers, string keywords)
        {
            return base.Channel.RegisterEmail2Async(AuthenticationTicket, FolderPath, EmailName, Senders, Recipients, CCAddress, BCCAddress, SentDate, Subject, header, htmlBody, textBody, AttachmentHandlers, keywords);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ServerSideImportAsync(string AuthenticationTicket, string BaseServerSidePath, string Items, string TargetIRPath)
        {
            return base.Channel.ServerSideImportAsync(AuthenticationTicket, BaseServerSidePath, Items, TargetIRPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateDocumentUsingTemplateAsync(string AuthenticationTicket, string Path, string TemplatePath, string xmlContent)
        {
            return base.Channel.CreateDocumentUsingTemplateAsync(AuthenticationTicket, Path, TemplatePath, xmlContent);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> IsLockPossibleAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.IsLockPossibleAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> LockAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.LockAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UnLockAsync(string AuthenticationTicket, string Path, bool force)
        {
            return base.Channel.UnLockAsync(AuthenticationTicket, Path, force);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> EmptyRecycleBinAsync(string AuthenticationTicket)
        {
            return base.Channel.EmptyRecycleBinAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> PurgeRecycleBinItemAsync(string AuthenticationTicket, string ItemHandler)
        {
            return base.Channel.PurgeRecycleBinItemAsync(AuthenticationTicket, ItemHandler);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RestoreRecycleBinItemAsync(string AuthenticationTicket, string ItemHandler, string RestorePath)
        {
            return base.Channel.RestoreRecycleBinItemAsync(AuthenticationTicket, ItemHandler, RestorePath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetRecycleBinContentAsync(string AuthenticationTicket)
        {
            return base.Channel.GetRecycleBinContentAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDeleteLogAsync(string AuthenticationTicket, System.DateTime StartDate, System.DateTime EndDate, string PathFilter)
        {
            return base.Channel.GetDeleteLogAsync(AuthenticationTicket, StartDate, EndDate, PathFilter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderCatalogAsync(string AuthenticationTicket, string folderPath)
        {
            return base.Channel.GetFolderCatalogAsync(AuthenticationTicket, folderPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderStatisticsAsync(string AuthenticationTicket, string folderPath)
        {
            return base.Channel.GetFolderStatisticsAsync(AuthenticationTicket, folderPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> getApplicationParametersAsync(string AuthenticationTicket)
        {
            return base.Channel.getApplicationParametersAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateDomainAsync(string AuthenticationTicket, string DomainName, bool Anonymous, bool Hidden, string WelcomeMessage)
        {
            return base.Channel.CreateDomainAsync(AuthenticationTicket, DomainName, Anonymous, Hidden, WelcomeMessage);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDomainAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.DeleteDomainAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainsAsync(string AuthenticationTicket)
        {
            return base.Channel.GetDomainsAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetMemberDomainsAsync(string AuthenticationTicket)
        {
            return base.Channel.GetMemberDomainsAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDomainAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.GetDomainAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDomainAsync(string AuthenticationTicket, string DomainName, string NewDomainName, bool Anonymous, bool Hidden, string WelcomeMessage)
        {
            return base.Channel.UpdateDomainAsync(AuthenticationTicket, DomainName, NewDomainName, Anonymous, Hidden, WelcomeMessage);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ArchiveDomainAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.ArchiveDomainAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UnarchiveDomainAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.UnarchiveDomainAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DomainExistsAsync(string AuthenticationTicket, string DomainName)
        {
            return base.Channel.DomainExistsAsync(AuthenticationTicket, DomainName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateFlowDefAsync(string AuthenticationTicket, string DomainName, string FlowName, string ActiveFolderPath)
        {
            return base.Channel.CreateFlowDefAsync(AuthenticationTicket, DomainName, FlowName, ActiveFolderPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateFlowDef1Async(string AuthenticationTicket, string DomainName, string FlowName, string ActiveFolderPath, string OnEndMoveToPath)
        {
            return base.Channel.CreateFlowDef1Async(AuthenticationTicket, DomainName, FlowName, ActiveFolderPath, OnEndMoveToPath);
        }
        
        public System.Threading.Tasks.Task MaintenanceBeatAsync()
        {
            return base.Channel.MaintenanceBeatAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> ServerInfoAsync()
        {
            return base.Channel.ServerInfoAsync();
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAddInInfoAsync(string AddInName)
        {
            return base.Channel.GetAddInInfoAsync(AddInName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<OmintracsInCabServiceReference.GetAddInPartResponse> OmintracsInCabServiceReference.srvSoap.GetAddInPartAsync(OmintracsInCabServiceReference.GetAddInPartRequest request)
        {
            return base.Channel.GetAddInPartAsync(request);
        }
        
        public System.Threading.Tasks.Task<OmintracsInCabServiceReference.GetAddInPartResponse> GetAddInPartAsync(string AddInName)
        {
            OmintracsInCabServiceReference.GetAddInPartRequest inValue = new OmintracsInCabServiceReference.GetAddInPartRequest();
            inValue.AddInName = AddInName;
            return ((OmintracsInCabServiceReference.srvSoap)(this)).GetAddInPartAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> LogOutAsync(string AuthenticationTicket)
        {
            return base.Channel.LogOutAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateTicketforUserAsync(string TrustedUserPwd, string UserName)
        {
            return base.Channel.CreateTicketforUserAsync(TrustedUserPwd, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AuthenticateUserAsync(string UID, string PWD)
        {
            return base.Channel.AuthenticateUserAsync(UID, PWD);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AuthenticateUser1Async(string UID, string PWD, string Lang)
        {
            return base.Channel.AuthenticateUser1Async(UID, PWD, Lang);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RenewTicketAsync(string UID, string PWD, string Lang, string OldTicket)
        {
            return base.Channel.RenewTicketAsync(UID, PWD, Lang, OldTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> isValidTicketAsync(string AuthenticationTicket)
        {
            return base.Channel.isValidTicketAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UserExistsAsync(string AuthenticationTicket, string UserName)
        {
            return base.Channel.UserExistsAsync(AuthenticationTicket, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DocumentAccessAllowedAsync(string AuthenticationTicket, string Path, int ActionId)
        {
            return base.Channel.DocumentAccessAllowedAsync(AuthenticationTicket, Path, ActionId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> FolderAccessAllowedAsync(string AuthenticationTicket, string Path, int ActionId)
        {
            return base.Channel.FolderAccessAllowedAsync(AuthenticationTicket, Path, ActionId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateFolderAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.CreateFolderAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> CreateFolder1Async(string AuthenticationTicket, string ParentFolderPath, string NewFolderName, string Description)
        {
            return base.Channel.CreateFolder1Async(AuthenticationTicket, ParentFolderPath, NewFolderName, Description);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteFolderAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.DeleteFolderAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDocumentAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.DeleteDocumentAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UnpublishDocumentAsync(string AuthenticationTicket, string DocumentPath)
        {
            return base.Channel.UnpublishDocumentAsync(AuthenticationTicket, DocumentPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> PublishDocumentAsync(string AuthenticationTicket, string DocumentPath, int VersionNumber)
        {
            return base.Channel.PublishDocumentAsync(AuthenticationTicket, DocumentPath, VersionNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDocumentVersionAsync(string AuthenticationTicket, string DocumentPath, int VersionNumber)
        {
            return base.Channel.DeleteDocumentVersionAsync(AuthenticationTicket, DocumentPath, VersionNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSubscribersAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetSubscribersAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUserToFolderSubscribersAsync(string AuthenticationTicket, string FolderPath, string UserName, bool ON_READ, bool ON_CHANGE, bool ON_UPDATE, bool ON_CHECKOUT, bool ON_APPROVE, bool ON_REJECT, bool ON_COMMENT, bool ON_MOVE, bool ON_DELETE, bool ON_CHECKIN, bool ON_NEWDOC, bool IncludeSubObjects)
        {
            return base.Channel.AddUserToFolderSubscribersAsync(AuthenticationTicket, FolderPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN, ON_NEWDOC, IncludeSubObjects);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddUserToDocumentSubscribersAsync(string AuthenticationTicket, string DocumentPath, string UserName, bool ON_READ, bool ON_CHANGE, bool ON_UPDATE, bool ON_CHECKOUT, bool ON_APPROVE, bool ON_REJECT, bool ON_COMMENT, bool ON_MOVE, bool ON_DELETE, bool ON_CHECKIN)
        {
            return base.Channel.AddUserToDocumentSubscribersAsync(AuthenticationTicket, DocumentPath, UserName, ON_READ, ON_CHANGE, ON_UPDATE, ON_CHECKOUT, ON_APPROVE, ON_REJECT, ON_COMMENT, ON_MOVE, ON_DELETE, ON_CHECKIN);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserFromFolderSubscribersAsync(string AuthenticationTicket, string FolderPath, string UserName, bool IncludeSubObjects)
        {
            return base.Channel.RemoveUserFromFolderSubscribersAsync(AuthenticationTicket, FolderPath, UserName, IncludeSubObjects);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveUserFromDocumentSubscribersAsync(string AuthenticationTicket, string DocumentPath, string UserName)
        {
            return base.Channel.RemoveUserFromDocumentSubscribersAsync(AuthenticationTicket, DocumentPath, UserName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> FolderExistsAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.FolderExistsAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> FolderExists1Async(string AuthenticationTicket, string FolderPath, string FolderName)
        {
            return base.Channel.FolderExists1Async(AuthenticationTicket, FolderPath, FolderName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetSubFoldersCountAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetSubFoldersCountAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetParentFolderIDsAsync(string AuthenticationTicket, int FolderID)
        {
            return base.Channel.GetParentFolderIDsAsync(AuthenticationTicket, FolderID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderAsync(string AuthenticationTicket, string Path, bool WithRules, bool withPropertySets, bool withSecurity, bool withOwner)
        {
            return base.Channel.GetFolderAsync(AuthenticationTicket, Path, WithRules, withPropertySets, withSecurity, withOwner);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentAsync(string AuthenticationTicket, string Path, bool withPropertySets, bool withSecurity, bool withOwner, bool withVersions)
        {
            return base.Channel.GetDocumentAsync(AuthenticationTicket, Path, withPropertySets, withSecurity, withOwner, withVersions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentVersionsAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetDocumentVersionsAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentAbstractAsync(string AuthenticationTicket, string Path, int VersionNumber)
        {
            return base.Channel.GetDocumentAbstractAsync(AuthenticationTicket, Path, VersionNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentTextOnlyContentAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetDocumentTextOnlyContentAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetVersionTextOnlyContentAsync(string AuthenticationTicket, string Path, int VersionNumber)
        {
            return base.Channel.GetVersionTextOnlyContentAsync(AuthenticationTicket, Path, VersionNumber);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentTextOnlyContentAsync(string AuthenticationTicket, string Path, string ContentText)
        {
            return base.Channel.SetDocumentTextOnlyContentAsync(AuthenticationTicket, Path, ContentText);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetVersionTextOnlyContentAsync(string AuthenticationTicket, string Path, int VersionNumber, string ContentText)
        {
            return base.Channel.SetVersionTextOnlyContentAsync(AuthenticationTicket, Path, VersionNumber, ContentText);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentCommentsAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetDocumentCommentsAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociationTypesAsync(string AuthenticationTicket)
        {
            return base.Channel.AssociationTypesAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociateDocumentAsync(string AuthenticationTicket, string DocumentPath, string AssociateWith_ItemPath, int AssociationTypeID)
        {
            return base.Channel.AssociateDocumentAsync(AuthenticationTicket, DocumentPath, AssociateWith_ItemPath, AssociationTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociateFolderAsync(string AuthenticationTicket, string FolderPath, string AssociateWith_ItemPath, int AssociationTypeID)
        {
            return base.Channel.AssociateFolderAsync(AuthenticationTicket, FolderPath, AssociateWith_ItemPath, AssociationTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> RemoveAssociationAsync(string AuthenticationTicket, string ItemPath, string AssociationWith_ItemPath, bool IsReverseAssociation)
        {
            return base.Channel.RemoveAssociationAsync(AuthenticationTicket, ItemPath, AssociationWith_ItemPath, IsReverseAssociation);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociatedDocumentsAsync(string AuthenticationTicket, string ItemPath)
        {
            return base.Channel.AssociatedDocumentsAsync(AuthenticationTicket, ItemPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociatedFoldersAsync(string AuthenticationTicket, string ItemPath)
        {
            return base.Channel.AssociatedFoldersAsync(AuthenticationTicket, ItemPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AssociatedFoldersAndDocumentsAsync(string AuthenticationTicket, string ItemPath)
        {
            return base.Channel.AssociatedFoldersAndDocumentsAsync(AuthenticationTicket, ItemPath);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> getTasksAsync(string AuthenticationTicket, string xmlcriteria, string SortBy, bool AscendingOrder)
        {
            return base.Channel.getTasksAsync(AuthenticationTicket, xmlcriteria, SortBy, AscendingOrder);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDueTaskDocumentsAsync(string AuthenticationTicket)
        {
            return base.Channel.GetDueTaskDocumentsAsync(AuthenticationTicket);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddDocumentCommentAsync(string AuthenticationTicket, string DocumentPath, string CommentText)
        {
            return base.Channel.AddDocumentCommentAsync(AuthenticationTicket, DocumentPath, CommentText);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeleteDocumentCommentAsync(string AuthenticationTicket, string DocumentPath, int CommentAuthorID, System.DateTime CommentDate)
        {
            return base.Channel.DeleteDocumentCommentAsync(AuthenticationTicket, DocumentPath, CommentAuthorID, CommentDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentViewLogAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetDocumentViewLogAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentReadLogHistoryAsync(string AuthenticationTicket, string Path, int UserID)
        {
            return base.Channel.GetDocumentReadLogHistoryAsync(AuthenticationTicket, Path, UserID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentKeywordsAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetDocumentKeywordsAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetPropertySetsAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetPropertySetsAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> AddPropertySetRowAsync(string AuthenticationTicket, string Path, string xmlpset)
        {
            return base.Channel.AddPropertySetRowAsync(AuthenticationTicket, Path, xmlpset);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdatePropertySetRowAsync(string AuthenticationTicket, string Path, string xmlpset)
        {
            return base.Channel.UpdatePropertySetRowAsync(AuthenticationTicket, Path, xmlpset);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> DeletePropertySetRowAsync(string AuthenticationTicket, string Path, string xmlpset)
        {
            return base.Channel.DeletePropertySetRowAsync(AuthenticationTicket, Path, xmlpset);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetOwnerAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetOwnerAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetOwnerAsync(string AuthenticationTicket, string Path, string NewOwnerUserName, bool ApplytoTree)
        {
            return base.Channel.SetOwnerAsync(AuthenticationTicket, Path, NewOwnerUserName, ApplytoTree);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderRulesAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetFolderRulesAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetFolderRulesAsync(string AuthenticationTicket, string Path, System.Xml.Linq.XElement xmlRules, bool ApplyToTree)
        {
            return base.Channel.SetFolderRulesAsync(AuthenticationTicket, Path, xmlRules, ApplyToTree);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateFolderPropertiesAsync(string AuthenticationTicket, string Path, string NewFolderName, string NewDescription)
        {
            return base.Channel.UpdateFolderPropertiesAsync(AuthenticationTicket, Path, NewFolderName, NewDescription);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentPropertiesAsync(string AuthenticationTicket, string Path, string NewDocumentName, string NewDescription, string NewUpdateInstructions)
        {
            return base.Channel.UpdateDocumentPropertiesAsync(AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentProperties1Async(string AuthenticationTicket, string Path, string NewDocumentName, string NewDescription, string NewUpdateInstructions, string NewDocumentSource, string NewDocumentLanguage, string NewDocumentAuthor)
        {
            return base.Channel.UpdateDocumentProperties1Async(AuthenticationTicket, Path, NewDocumentName, NewDescription, NewUpdateInstructions, NewDocumentSource, NewDocumentLanguage, NewDocumentAuthor);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentTypeAsync(string AuthenticationTicket, string Path, int DocumentTypeID)
        {
            return base.Channel.UpdateDocumentTypeAsync(AuthenticationTicket, Path, DocumentTypeID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SubmitDocumentToFlowAsync(string AuthenticationTicket, string Path, string FlowDefID)
        {
            return base.Channel.SubmitDocumentToFlowAsync(AuthenticationTicket, Path, FlowDefID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SubmitDocumentToFlow1Async(string AuthenticationTicket, string Path, string FlowDefID, string StepPlayerIDs, string StepGroupIDs)
        {
            return base.Channel.SubmitDocumentToFlow1Async(AuthenticationTicket, Path, FlowDefID, StepPlayerIDs, StepGroupIDs);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentCompletionStatusAsync(string AuthenticationTicket, string Path, int PercentComplete, System.DateTime CompletionDate)
        {
            return base.Channel.SetDocumentCompletionStatusAsync(AuthenticationTicket, Path, PercentComplete, CompletionDate);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentImportanceAsync(string AuthenticationTicket, string Path, short Importance)
        {
            return base.Channel.SetDocumentImportanceAsync(AuthenticationTicket, Path, Importance);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetFolderRandDScheduleAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetFolderRandDScheduleAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetDocumentRandDScheduleAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetDocumentRandDScheduleAsync(AuthenticationTicket, Path);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentRandDScheduleAsync(string AuthenticationTicket, string Path, int RDDefId)
        {
            return base.Channel.SetDocumentRandDScheduleAsync(AuthenticationTicket, Path, RDDefId);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> SetDocumentRetentionAsync(string AuthenticationTicket, string Path, short RetentionStatus, System.DateTime RetainUntil)
        {
            return base.Channel.SetDocumentRetentionAsync(AuthenticationTicket, Path, RetentionStatus, RetainUntil);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> UpdateDocumentKeywordsAsync(string AuthenticationTicket, string Path, string Keywords)
        {
            return base.Channel.UpdateDocumentKeywordsAsync(AuthenticationTicket, Path, Keywords);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> GetAccessListAsync(string AuthenticationTicket, string Path)
        {
            return base.Channel.GetAccessListAsync(AuthenticationTicket, Path);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.srvSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.srvSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.srvSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://scans.omnitracs.com/inforouter/srv.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.srvSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://scans.omnitracs.com/inforouter/srv.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            srvSoap,
            
            srvSoap12,
        }
    }
}
