using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Sieve.Services;
using ticketing_api.Controllers.BaseController;
using ticketing_api.Data;
using ticketing_api.Infrastructure;
using ticketing_api.Infrastructure.Identity;
using ticketing_api.Models;


namespace ticketing_api.Controllers
{
    [Produces("application/json")]
    [Route("api/[controller]")]
    public class AccountsController : IdentityBaseController
    {
        private readonly ILogger<AccountsController> _logger;

        public AccountsController(
            ApplicationDbContext context,
            ApplicationUserManager userManager,
            IEmailSender emailSender,
            ILogger<AccountsController> logger, 
            ISieveProcessor sieveProcessor
        ) : base(context, userManager, emailSender, sieveProcessor)
        {
            _logger = logger;
        }

        ////NOTE: for now we are not allowing registration outside of the user management page
        //[AllowAnonymous]
        //[HttpPost("Register")]
        //public async Task<IActionResult> Register([FromBody] RegisterModel model)
        //{
        //    if (!ModelState.IsValid)
        //        return BadRequest(ModelState);

        //    var result = await UserManager.CreateUserAsync(model.Email, model.Password, "");

        //    if (result == null)
        //        return BadRequest();

        //    if (result.Succeeded)
        //        return Ok(result);

        //    AddErrors(result);

        //    return BadRequest(ModelState);
        //}

        /// <summary>
        ///  Generate token and send link to user's email so that user can reset password
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpPost("ForgotPassword")]
        public async Task<IActionResult> ForgotPassword([FromBody] ForgotPasswordModel model)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var appUser = await UserManager.FindByEmailAsync(model.Email);
            if (appUser == null)
                return NotFound();

            var user = _context.AppUser.FirstOrDefault(x => x.Email == model.Email && x.IsEnabled);
            if (user == null)
                return NotFound("Email Id are not found");

            var token = await UserManager.GeneratePasswordResetTokenAsync(appUser);
            user.SetPasswordToken = token;

            _context.AppUser.Update(user);
            _context.SaveChanges();

            //await EmailSender.SendForgotPasswordEmailAsync(user, token);

            return Ok();
        }

        /// <summary>
        ///     Resets password for current user with token that is generated by forgot password method
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpPost("ResetPassword")]
        public async Task<IActionResult> ResetPassword([FromBody] ResetPasswordModel model)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);

            var appUser = _context.AppUser.FirstOrDefault(x => x.Email == model.Email && x.IsEnabled);
            if (appUser == null)
                return NotFound();

            appUser.SetPasswordToken = null;
            _context.AppUser.Update(appUser);
            _context.SaveChanges();

            var aspnetUser = await UserManager.FindByEmailAsync(model.Email);
            if (aspnetUser == null)
                return NotFound("Email Id are not found");

            var result = UserManager.ResetPasswordAsync(aspnetUser, model.ResetPasswordToken, model.Password).Result;

            if (result.Succeeded)
                return Ok();

            AddErrors(result);

            return BadRequest(ModelState);
        }

        ///// <summary>
        /////     User can change password, need username(Email), Old password and new password
        ///// </summary>
        ///// <param name="model"></param>
        ///// <returns></returns>
        //[HttpPost("ChangePassword")]
        //public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordModel model)
        //{
        //    if (!ModelState.IsValid)
        //        return BadRequest(ModelState);

        //    var result = await UserManager.ChangePasswordAsync(model.Email, model.OldPassword, model.NewPassword);

        //    if (result.Succeeded)
        //        return Ok();

        //    return BadRequest();
        //}

        public class TokenModel
        {
            public string token { get; set; }
        }

        /// <summary>
        /// for getting the username from token in reset password functionality
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        [AllowAnonymous]
        [HttpPost("token")]
        public IActionResult Token([FromBody] TokenModel token)
        {
            var user = _context.AppUser.Where(x => !x.IsDeleted).FirstOrDefault(x => x.SetPasswordToken == token.token);

            if (user == null)
                return NotFound();

            user.Clean();

            return Ok(user);
        }
    }
}